buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
              name 'OpenMods Third Party'
              url 'https://repo.openmods.info/artifactory/simple/thirdparty'
        }
        maven {
            name 'Forge Mirror'
            url 'http://unleveledgaming.org/libraries'
        }
        maven {
            name = 'Forge'
            url = 'https://files.minecraftforge.net/maven'
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'net.thesilkminer.gradle.translationchecker:TranslationChecker:1.1'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'java'

// HACK: we want to add those repos to all including projects, but still be available to compile this project directly
rootProject.allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name 'MinecraftS3'
            url 'https://s3.amazonaws.com/Minecraft.Download/libraries'
        }
        maven {
            name "OpenMods"
            url "https://repo.openmods.info/artifactory/openmods"
        }
        maven {
            name "OpenMods Extras"
            url 'https://repo.openmods.info/artifactory/thirdparty'
        }
        maven {
            name 'Forge Mirror'
            url 'http://unleveledgaming.org/libraries'
        }
        maven {
            name 'Forge'
            url 'https://files.minecraftforge.net/maven'
        }
    }
}

/*
repositories {
    maven {
        name "local"
        url ('file:/' + project.file('repo').getAbsolutePath())
    }
}
*/

configurations {
    shade {
        transitive = false
    }
    compile.extendsFrom shade
}

dependencies {
    shade group: 'info.openmods', name: 'calc', version: '0.3'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
}

def String git(String... arguments) {
    def out = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = arguments.toList()
        standardOutput = out
    }
    out.toString().trim()
}

def String gitHash() {
    git 'rev-parse', '--short', 'HEAD'
}

def String gitBranch() {
    git 'rev-parse', '--abbrev-ref', 'HEAD'
}

def env = System.getenv()

version = mc_ver + "-" + mod_version

def in_jenkins = false

def jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = in_jenkins ? env.GIT_BRANCH.minus("origin/") : gitBranch()
def hash = gitHash()

if (branch != null && !branch.equals("master")) {
    version += "-" + branch
}

if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}

def gitManifest = manifest {
    if (branch != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    }
}

minecraft {
    version = mc_ver + "-" + forge_ver
    runDir = "run"

    mappings = mcp_mappings

    replaceIn "openmods/OpenMods.java"
    replaceIn "openmods/core/OpenModsCore.java"
    replaceIn "openmods/core/OpenModsCorePlugin.java"
    replace '$LIB-VERSION$', mod_version
}

processResources {
    inputs.property "version", mod_version
    inputs.property "mcversion", project.minecraft.version

    // Process mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version':mod_version, 'mc_version':mc_ver
    }

    // Copy anything else directly
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

def fmlManifest = manifest {
    attributes(
        "FMLCorePlugin": "openmods.core.OpenModsCorePlugin",
        "FMLCorePluginContainsFMLMod": "true",
    )
}

if (project.hasProperty('keyStore')) {
    task signJar(type: SignJar, dependsOn: reobfJar) {
        keyStore = project.keyStore
        alias = project.keyStoreAlias
        storePass = project.keyStorePass
        keyPass = project.keyStoreKeyPass

        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }

    build.dependsOn signJar
}

jar {
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }

    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:accessibility,html,syntax', true)
    }
}

task updateTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openmods"
    templateFileName = "en_us.lang"
}

task checkTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openmods"
    dryRun = true
    templateFileName = "en_us.lang"
}

task wrapper (type: Wrapper) {
    gradleVersion = "2.14"
}

task generateOrientationDetails(type: JavaExec, dependsOn: compileJava) {
   main = "openmods.geometry.OrientationInfoGenerator"
   classpath = sourceSets.main.runtimeClasspath + files(sourceSets.main.output.classesDir)
}
